@startuml BrazilianElectionsSystem

title Diagrama de Classes - Sistema de Apuração Eleitoral de Vereadores

' Pacote principal
package "br.ufes.gabriel.eleicao" {
  class App {
    + main(args: String[]): void
  }

  class Eleicao {
    - codMunicipio: String
    - dataEleicao: LocalDate
    - vagas: int
    - candidatos: Map<Integer, Candidato>
    - partidos: List<Partido>
    + Eleicao(codMunicipio: String, dataEleicao: LocalDate)
    + adicionaCandidato(Candidato): void
    + adicionaPartido(Partido): void
    + getNumeroCandidatosEleitos(): int
    + getPartidoPorNumero(nr: int): Partido
    + getCandidatos(): Collection<Candidato>
    + getPartidos(): List<Partido>
  }

  class Relatorio {
    - eleicao: Eleicao
    - candidatosOrdenados: List<Candidato>
    - partidosOrdenados: List<Partido>
    + Relatorio(eleicao: Eleicao)
    + gerarRelatorios(): void
    - printNumeroVagas(): void
    - printCandidatosMaisVotados(): void
    - printVotacaoPorPartido(): void
    - printPrimeiroUltimoPorPartido(): void
    - printDistribuicaoFaixaEtaria(): void
    - printDistribuicaoGenero(): void
    - printTotalVotos(): void
  }
}

' Pacote de modelo
package "br.ufes.gabriel.eleicao.model" {
  class Partido {
    - nrPartido: int
    - sgPartido: String
    - votosLegenda: int
    - candidatos: List<Candidato>
    + Partido(nr: int, sigla: String)
    + addCandidato(Candidato): void
    + addVotosLegenda(int): void
    + getVotosNominais(): int
    + getTotalVotos(): int
    + getCandidatos(): List<Candidato>
  }

  class Candidato {
    - nrCandidato: int
    - nmUrna: String
    - dtNascimento: LocalDate
    - sgPartido: String
    - nrFederacao: int
    - qtdVotos: int
    - partido: Partido
    + Candidato(..., partido: Partido)
    + addVotos(int): void
    + isEleito(): boolean
    + getQtdVotos(): int
    + getDtNascimento(): LocalDate
    + getNrFederacao(): int
  }
}

' Pacote de util
package "br.ufes.gabriel.eleicao.util" {
  class Leitor {
    - brCandidatos: BufferedReader
    - brVotos: BufferedReader
    + Leitor(caminhoCandidatos: String, caminhoVotos: String)
    + leituraCandidatos(eleicao: Eleicao): void
    + leituraVotos(eleicao: Eleicao): void
  }
}

' Relacionamentos
App --> Eleicao : cria >
App --> Leitor : usa >
App --> Relatorio : usa >

Leitor --> Eleicao : popula candidatos e partidos >

Eleicao "1" *-- "0..*" Candidato : contém >
Eleicao "1" *-- "0..*" Partido   : contém >

Partido "1" o-- "0..*" Candidato : agrega >
Candidato --> Partido : pertence a >

Relatorio --> Eleicao   : analisa >
Relatorio --> Candidato : ordena/relata >
Relatorio --> Partido   : ordena/relata >
@enduml
